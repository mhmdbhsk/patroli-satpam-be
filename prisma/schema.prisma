generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum AssetCondition {
  good
  broken
}

enum Role {
  admin
  security
  superadmin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(admin)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ReportBuilding ReportBuilding[]
  ReportRoom     ReportRoom[]
  ReportAsset    ReportAsset[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Building {
  id          String   @id @default(cuid())
  name        String
  totalFloor  String
  latitude    String
  longitude   String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reports ReportBuilding[]
  rooms   Room[]
}

model Room {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  buildingId  String
  floor       String

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  reports ReportRoom[]
  assets  Asset[]
}

model Asset {
  id          String         @id @default(cuid())
  name        String
  description String
  image       String?
  notes       String?
  roomId      String?
  quantity    Int
  condition   AssetCondition

  room Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reports ReportAsset[]
}

model ReportBuilding {
  id          String   @id @default(cuid())
  buildingId  String
  userId      String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  latitude    String
  longitude   String

  user     User     @relation(fields: [userId], references: [id])
  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
}

model ReportRoom {
  id          String   @id @default(cuid())
  roomId      String
  userId      String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model ReportAsset {
  id          String   @id @default(cuid())
  assetId     String
  userId      String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Setting {
  id          String   @id @default(cuid())
  name        String
  description String
  value       String
  unit        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
